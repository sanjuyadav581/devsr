# -*- coding: utf-8 -*-
"""LVADSUSR108-Sairus-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gk7lIo1AIxxGTF5Borb6oobL5uWJ8DGI
"""

import numpy as np
import pandas as pd

#1
rgb_image= np.array([[[255,0,0],[0,255,0],[0,0,255]],
                     [[255,255,0],[255,0,255],[0,255,255]],
                     [[127,127,127],[200,200,200],[50,50,50]]])
rgb_image

def calculate_luminance(pixel):
    return 0.2989 * pixel[0] + 0.5870 * pixel[1] + 0.1140 * pixel[2]

for row in rgb_image:
    for pixel in row:
        luminance = calculate_luminance(pixel)
        print(f"Luminance for pixel {pixel}: {luminance}")

#2

def ans3(array):

    means = np.mean(array, axis=0)
    stds = np.std(array, axis=0)


    normalized_array = (array - means) / stds

    return normalized_array

#3

#senor_data is the data
def q3_sol(sensor_data):
  flattened_data = np.reshape(sensor_data, (sensor_data.shape[0], -1))
  reshaped_data = np.reshape(flattened_data, (sensor_data.shape[0], -1))
  return reshaped_data

#4
def q4_sol(data):
  first_game_scores = data[:, 0]
  last_game_scores = data[:, -1]
  return last_game_scores - first_game_scores

#5
def solve(scores):
    last_three_subjects = scores[:, -3:]
    last_three_subjects = np.where(last_three_subjects == -1, np.nan, last_three_subjects)
    average_scores = np.nanmean(last_three_subjects, axis=1)
    return average_scores

# it will take 2d array and will return 1d array of avg marks of students.

#6

def q6(temperatures, adjustment_factors):
    adjusted_temperatures = temperatures * adjustment_factors[:, np.newaxis]
    return adjusted_temperatures
#it takes both 1d array and will return 1d array of adjusted temp of the cities





#7
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
        'Age': [25, 30, 35, 40, 45, 50, 55],
        'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
        'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']}

filtered = [(data['Name'][i], data['City'][i]) for i in range(len(data['Name'])) if data['Age'][i] < 45 and data['Department'][i] != 'HR']


filtered

for name, city in filtered:
    print(f"Name: {name}, City: {city}")

#8
data_q8 = [
    {"Product": "Apples", "Category": "Fruit", "Price": 1.20, "Promotion": True},
    {"Product": "Bananas", "Category": "Fruit", "Price": 0.50, "Promotion": False},
    {"Product": "Cherries", "Category": "Fruit", "Price": 3.00, "Promotion": True},
    {"Product": "Dates", "Category": "Fruit", "Price": 2.50, "Promotion": True},
    {"Product": "Elderberries", "Category": "Fruit", "Price": 4.00, "Promotion": False},
    {"Product": "Flour", "Category": "Bakery", "Price": 1.50, "Promotion": True},
    {"Product": "Grapes", "Category": "Fruit", "Price": 2.00, "Promotion": False},
]
df = pd.DataFrame(data_q8)
df

fruit_df = df[df['Category'] == 'Fruit']
fruit_df

average_price_fruit = fruit_df['Price'].mean()

potential_candidates = fruit_df[(fruit_df['Price'] > average_price_fruit) & (~fruit_df['Promotion'])]
print(potential_candidates)

#9
employee_data = pd.DataFrame({
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
})


project_data = pd.DataFrame({
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
})


merged_data = pd.merge(project_data, employee_data, on='Employee', how='left')
merged_data

department_overview = merged_data.groupby(['Department', 'Manager']).agg({'Project': lambda x: ', '.join(x.unique())}).reset_index()
department_overview

department_overview['Project'] = department_overview['Project'].fillna('')

print(department_overview)



#10
sale_data = {'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
'Sales': [70000, 50000, 30000, 40000, 60000]}
q10 = pd.DataFrame(sale_data)
q10

department_avg_sales = q10.groupby(['Department','Salesperson'])['Sales'].mean().reset_index()
department_avg_sales

department_avg_sales = department_avg_sales.sort_values(by='Sales', ascending=False)
department_avg_sales



















